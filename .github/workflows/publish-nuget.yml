name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0

jobs:
  build-sign-publish:
    runs-on: windows-latest
    env:
      SIGN_CODE: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack
        run: |
          $version = "${{ github.ref_name }}" -replace '^v', ''
          dotnet pack --configuration Release --no-build --output ./nupkgs -p:PackageVersion=$version
        shell: pwsh

      - name: Pack
        run: |
          $version = "${{ github.ref_name }}" -replace '^v', ''
          dotnet pack --configuration Release --no-build --output ./nupkgs -p:PackageVersion=$version
        shell: pwsh

      - name: Get .nupkg path
        id: locate_nupkg
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path "./nupkgs" -Filter "ZentrixLabs.PrtgSdk.*.nupkg" | Select-Object -First 1
          echo "Found: $($pkg.FullName)"
          echo "nupkg_path=$($pkg.FullName)" >> $env:GITHUB_OUTPUT

      - name: Create temp directory for signed output
        run: New-Item -ItemType Directory -Force -Path "nupkgs-signed"
        shell: powershell

      - name: Sign .nupkg file (SSL.com eSigner)
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ steps.locate_nupkg.outputs.nupkg_path }}
          output_path: ./nupkgs-signed
          environment_name: PROD
          signing_method: v2
          malware_block: false
        timeout-minutes: 10

      - name: Push to NuGet
        run: dotnet nuget push ./nupkgs/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
